/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package AccountsForms;

import MenuForms.MenuForm;
import com.mycompany.finmanagerpav.DialogHelper;
import com.mycompany.finmanagerpav.FinManagerPav;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class AccountsForm extends javax.swing.JFrame {

    /**
     * Creates new form AccountsForm
     */
    public AccountsForm() {
        initComponents();
        setLocationRelativeTo(null);
    }
    
    public static void displayAccounts(){
        DefaultTableModel model = (DefaultTableModel) AccountsTable.getModel();
        
        model.setRowCount(0); // Очищення таблиці перед відображенням нових даних

        int userID = FinManagerPav.currentUserID;

        try (Connection connection = FinManagerPav.data.getConnection()) {
            String query = "SELECT ID, Title, Amount, Currency FROM account WHERE UserID = ?";
            try (PreparedStatement statement = connection.prepareStatement(query)) {
                statement.setInt(1, userID);
                try (ResultSet resultSet = statement.executeQuery()) {
                    boolean hasAccounts = false;

                    while (resultSet.next()) {
                        int accountID = resultSet.getInt("ID");
                        String title = resultSet.getString("Title");
                        float amount = resultSet.getFloat("Amount");
                        String currency = resultSet.getString("Currency");

                        // Додаємо рядок в модель таблиці
                        model.addRow(new Object[]{accountID, title, amount, currency});

                        hasAccounts = true; // Якщо у користувача є рахунки
                    }

                    // Перевіряємо, чи у користувача є рахунки
                    if (!hasAccounts) {
                        JOptionPane.showMessageDialog(null, "У вас ще немає жодного рахунку.", "Увага", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Помилка при відображенні рахунків!", "Помилка", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ChangeLimitButton = new javax.swing.JButton();
        LimitLabel = new javax.swing.JLabel();
        LimitLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        AccountsTable = new javax.swing.JTable();
        LoginTitleLabel = new javax.swing.JLabel();
        AddAccountButton = new javax.swing.JButton();
        EditAccountButton = new javax.swing.JButton();
        DeleteAccountButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("FinManager");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        ChangeLimitButton.setText("Змінити ліміт");
        ChangeLimitButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ChangeLimitButton.setFocusable(false);
        ChangeLimitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChangeLimitButtonActionPerformed(evt);
            }
        });

        LimitLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        LimitLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LimitLabel.setText("0 грн.");

        LimitLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        LimitLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LimitLabel1.setText("Ліміт на місяць:");

        AccountsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Назва рахунку", "Баланс", "Валюта"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Float.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        AccountsTable.setShowGrid(false);
        AccountsTable.setShowHorizontalLines(true);
        AccountsTable.setShowVerticalLines(true);
        AccountsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(AccountsTable);
        if (AccountsTable.getColumnModel().getColumnCount() > 0) {
            AccountsTable.getColumnModel().getColumn(0).setPreferredWidth(35);
        }

        LoginTitleLabel.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        LoginTitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LoginTitleLabel.setText("Мої гаманці");

        AddAccountButton.setText("Додати");
        AddAccountButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AddAccountButton.setFocusable(false);
        AddAccountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddAccountButtonActionPerformed(evt);
            }
        });

        EditAccountButton.setText("Редагувати");
        EditAccountButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        EditAccountButton.setFocusable(false);
        EditAccountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditAccountButtonActionPerformed(evt);
            }
        });

        DeleteAccountButton.setText("Видалити");
        DeleteAccountButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        DeleteAccountButton.setFocusable(false);
        DeleteAccountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteAccountButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(LoginTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(250, 250, 250))
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(AddAccountButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(EditAccountButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(DeleteAccountButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(LimitLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(LimitLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ChangeLimitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(LoginTitleLabel)
                .addGap(4, 4, 4)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(LimitLabel1)
                .addGap(0, 0, 0)
                .addComponent(LimitLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ChangeLimitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddAccountButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EditAccountButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DeleteAccountButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        MenuForm MenuF = new MenuForm();
        MenuF.setVisible(true);
    }//GEN-LAST:event_formWindowClosed

    private void ChangeLimitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChangeLimitButtonActionPerformed
        // TODO add your handling code here:
        LimitDialog LimitD = new LimitDialog(this, true);
        LimitD.setVisible(true);
    }//GEN-LAST:event_ChangeLimitButtonActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        LimitLabel.setText(FinManagerPav.currentLimit + " грн.");
        displayAccounts();
    }//GEN-LAST:event_formWindowOpened

    private void AddAccountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddAccountButtonActionPerformed
        // TODO add your handling code here:
        AddAccountDialog AddAccountD = new AddAccountDialog(this, true);
        AddAccountD.setVisible(true);
    }//GEN-LAST:event_AddAccountButtonActionPerformed

    private boolean isAccountSelected(int selectedRow) {
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Оберіть рахунок!", "Помилка", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        return true;
    }
    
    private void EditAccountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditAccountButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = AccountsTable.getSelectedRow();
        if (!isAccountSelected(selectedRow)) {
            return;
        }

        // Отримання ID обраного рахунку
        int accountID = (int) AccountsTable.getValueAt(selectedRow, 0);

        String title = (String) AccountsTable.getValueAt(selectedRow, 1);
        float amount = (float) AccountsTable.getValueAt(selectedRow, 2);
        String currency = (String) AccountsTable.getValueAt(selectedRow, 3);

        // Відкриття діалогового вікна редагування рахунку з переданими значеннями
        EditAccountDialog EditAccountD = new EditAccountDialog(this, true);
        EditAccountD.IdField.setText(String.valueOf(accountID));
        EditAccountD.TitleField.setText(title);
        EditAccountD.AmountField.setText(String.valueOf(amount));
        EditAccountD.CurrencyComboBox.setSelectedItem(currency);
        EditAccountD.setVisible(true);
    }//GEN-LAST:event_EditAccountButtonActionPerformed

    private void DeleteAccountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteAccountButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = AccountsTable.getSelectedRow();
        if (!isAccountSelected(selectedRow)) {
            return;
        }

        int rowCount = AccountsTable.getRowCount();
        if (rowCount <= 1) {
            JOptionPane.showMessageDialog(this, "Неможливо видалити єдиний рахунок!", "Помилка", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int accountID = (int) AccountsTable.getValueAt(selectedRow, 0);

        if (DialogHelper.showConfirmationDialog("Видалити рахунок?", "Видалення")) {
            try (Connection connection = FinManagerPav.data.getConnection()) {
                String query = "DELETE FROM account WHERE ID = ?";
                try (PreparedStatement statement = connection.prepareStatement(query)) {
                    statement.setInt(1, accountID);

                    int rowsAffected = statement.executeUpdate();
                    if (rowsAffected > 0) {
                        displayAccounts();
                        JOptionPane.showMessageDialog(this, "Рахунок успішно видалено!", "Успіх", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this, "Не вдалося видалити рахунок!", "Помилка", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Помилка при видаленні рахунку!", "Помилка", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_DeleteAccountButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AccountsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AccountsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AccountsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AccountsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AccountsForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JTable AccountsTable;
    private javax.swing.JButton AddAccountButton;
    private javax.swing.JButton ChangeLimitButton;
    private javax.swing.JButton DeleteAccountButton;
    private javax.swing.JButton EditAccountButton;
    public static javax.swing.JLabel LimitLabel;
    private javax.swing.JLabel LimitLabel1;
    private javax.swing.JLabel LoginTitleLabel;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
