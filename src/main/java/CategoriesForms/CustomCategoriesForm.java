/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package CategoriesForms;

import static MenuForms.MenuForm.TransactionsF;
import TransactionsForms.TransactionsForm;
import com.mycompany.finmanagerpav.DialogHelper;
import com.mycompany.finmanagerpav.FinManagerPav;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class CustomCategoriesForm extends javax.swing.JFrame {

    /**
     * Creates new form CustomCategoriesForm
     */
    public CustomCategoriesForm() {
        initComponents();
        setLocationRelativeTo(null);
    }

     public static void displayCustomCategories(){
        DefaultTableModel model = (DefaultTableModel) CategoriesTable.getModel();
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        for (int i = 0; i < CategoriesTable.getColumnCount() - 1; i++) {
            CategoriesTable.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
        model.setRowCount(0); 
        
        int userID = FinManagerPav.currentUserID;

        try (Connection connection = FinManagerPav.data.getConnection()) {
            String query = "SELECT ID, Name, Type FROM category WHERE (UserID = ? OR UserID IS NULL)";
            try (PreparedStatement statement = connection.prepareStatement(query)) {
                statement.setInt(1, userID);
                try (ResultSet resultSet = statement.executeQuery()) {
                    while (resultSet.next()) {
                        int ID = resultSet.getInt("ID");
                        String name = resultSet.getString("Name");
                        String type = resultSet.getString("Type");

                        model.addRow(new Object[]{ID, name, type});
                    }
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Помилка при заповненні таблиці категорій!", "Помилка", JOptionPane.ERROR_MESSAGE);
        }
     }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        CategoriesTable = new javax.swing.JTable();
        AddCategoryButton = new javax.swing.JButton();
        DeleteCategoryButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("FinManager");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        CategoriesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Назва", "Тип"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        CategoriesTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(CategoriesTable);

        AddCategoryButton.setText("Створити");
        AddCategoryButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AddCategoryButton.setFocusable(false);
        AddCategoryButton.setPreferredSize(new java.awt.Dimension(130, 23));
        AddCategoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddCategoryButtonActionPerformed(evt);
            }
        });

        DeleteCategoryButton.setText("Видалити");
        DeleteCategoryButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        DeleteCategoryButton.setFocusable(false);
        DeleteCategoryButton.setPreferredSize(new java.awt.Dimension(130, 23));
        DeleteCategoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteCategoryButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(AddCategoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(DeleteCategoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddCategoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DeleteCategoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 37, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        TransactionsF.setVisible(true);
        TransactionsF.displayTransactions();
    }//GEN-LAST:event_formWindowClosed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        displayCustomCategories();
    }//GEN-LAST:event_formWindowOpened

    private void AddCategoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddCategoryButtonActionPerformed
        // TODO add your handling code here:
        AddCategoryDialog AddCategoryD = new AddCategoryDialog(this, true);
        AddCategoryD.setVisible(true);
    }//GEN-LAST:event_AddCategoryButtonActionPerformed
    
    private void DeleteCategoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteCategoryButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = CategoriesTable.getSelectedRow();
        if (!isCategorySelected(selectedRow)) {
            return;
        }

        // Отримання ID вибраної категорії
        int categoryID = (int) CategoriesTable.getValueAt(selectedRow, 0);

        // Перевірка, чи це кастомна категорія
        if (!isUserCategory(categoryID)) {
            JOptionPane.showMessageDialog(this, "Ви не можете видалити стандартну категорію.", "Помилка", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Підтвердження видалення категорії
        if (DialogHelper.showConfirmationDialog("Видалити категорію?", "Видалення")) {
            try (Connection connection = FinManagerPav.data.getConnection()) {
                // Перевірка наявності транзакцій з даною категорією
                String transactionCountQuery = "SELECT COUNT(*) FROM transaction WHERE CategoryID = ? AND UserID = ?";
                try (PreparedStatement transactionCountStatement = connection.prepareStatement(transactionCountQuery)) {
                    transactionCountStatement.setInt(1, categoryID);
                    transactionCountStatement.setInt(2, FinManagerPav.currentUserID);
                    try (ResultSet resultSet = transactionCountStatement.executeQuery()) {
                        if (resultSet.next()) {
                            int transactionCount = resultSet.getInt(1);
                            if (transactionCount > 0) {
                                // Оновлення CategoryID для транзакцій з даною категорією
                                String updateTransactionQuery = "UPDATE transaction AS tr " +
                                        "JOIN category AS cat ON tr.CategoryID = cat.ID " +
                                        "SET tr.CategoryID = CASE WHEN cat.Type = 'Витрати' THEN 10 ELSE 11 END " +
                                        "WHERE tr.CategoryID = ?";
                                try (PreparedStatement updateTransactionStatement = connection.prepareStatement(updateTransactionQuery)) {
                                    updateTransactionStatement.setInt(1, categoryID);
                                    updateTransactionStatement.executeUpdate();
                                }
                            }
                        }
                    }
                }

                // Видалення категорії
                String deleteCategoryQuery = "DELETE FROM category WHERE ID = ?";
                try (PreparedStatement deleteCategoryStatement = connection.prepareStatement(deleteCategoryQuery)) {
                    deleteCategoryStatement.setInt(1, categoryID);
                    int rowsAffected = deleteCategoryStatement.executeUpdate();
                    if (rowsAffected > 0) {
                        displayCustomCategories();
                        JOptionPane.showMessageDialog(this, "Категорію успішно видалено!", "Успіх", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this, "Не вдалося видалити категорію!", "Помилка", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Помилка при видаленні категорії!", "Помилка", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_DeleteCategoryButtonActionPerformed

    private boolean isCategorySelected(int selectedRow) {
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Оберіть категорію!", "Помилка", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        
        return true;
    }
    
    private boolean isUserCategory(int categoryID) {
        try (Connection connection = FinManagerPav.data.getConnection()) {
            String query = "SELECT UserID FROM category WHERE ID = ?";
            try (PreparedStatement statement = connection.prepareStatement(query)) {
                statement.setInt(1, categoryID);
                try (ResultSet resultSet = statement.executeQuery()) {
                    if (resultSet.next()) {
                        int userID = resultSet.getInt("UserID");
                        return userID == FinManagerPav.currentUserID; // Перевірка, чи є UserID для категорії
                    }
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Помилка при перевірці категорії користувача.", "Помилка", JOptionPane.ERROR_MESSAGE);
        }
        return false;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomCategoriesForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomCategoriesForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomCategoriesForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomCategoriesForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CustomCategoriesForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddCategoryButton;
    private static javax.swing.JTable CategoriesTable;
    private javax.swing.JButton DeleteCategoryButton;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
