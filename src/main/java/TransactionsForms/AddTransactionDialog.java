/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package TransactionsForms;

import static TransactionsForms.TransactionsForm.displayTransactions;
import com.mycompany.finmanagerpav.FinManagerPav;
import java.awt.Window;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import javax.swing.JOptionPane;

/**
 *
 * @author user
 */
public class AddTransactionDialog extends javax.swing.JDialog {

    /**
     * Creates new form AddTransactionDialog
     */
    public AddTransactionDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AddAccountLabel = new javax.swing.JLabel();
        AccountsComboBox = new javax.swing.JComboBox<>();
        TypeLabel = new javax.swing.JLabel();
        AddTransactionButton = new javax.swing.JButton();
        DateLabel = new javax.swing.JLabel();
        AccountLabel = new javax.swing.JLabel();
        CategoryComboBox = new javax.swing.JComboBox<>();
        CategoryLabel = new javax.swing.JLabel();
        TypeComboBox = new javax.swing.JComboBox<>();
        AmountLabel = new javax.swing.JLabel();
        NoteField = new javax.swing.JTextField();
        NoteLabel = new javax.swing.JLabel();
        AmountField = new javax.swing.JTextField();
        DateChooser = new com.toedter.calendar.JDateChooser();
        AccountAmountLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Новий запис");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        AddAccountLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        AddAccountLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        AddAccountLabel.setText("Введіть дані нової транзакції:");

        AccountsComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Account 1", "Account 2" }));
        AccountsComboBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        AccountsComboBox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AccountsComboBox.setFocusable(false);
        AccountsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AccountsComboBoxActionPerformed(evt);
            }
        });

        TypeLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        TypeLabel.setText("Тип");

        AddTransactionButton.setText("Записати");
        AddTransactionButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AddTransactionButton.setFocusable(false);
        AddTransactionButton.setPreferredSize(new java.awt.Dimension(130, 23));
        AddTransactionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddTransactionButtonActionPerformed(evt);
            }
        });

        DateLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        DateLabel.setText("Дата");

        AccountLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        AccountLabel.setText("Гаманець");

        CategoryComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Категорія 1", "Категорія 2", "Категорія 3" }));
        CategoryComboBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        CategoryComboBox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        CategoryComboBox.setFocusable(false);

        CategoryLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        CategoryLabel.setText("Категорія");

        TypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Витрати", "Отримання" }));
        TypeComboBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        TypeComboBox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        TypeComboBox.setFocusable(false);
        TypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TypeComboBoxActionPerformed(evt);
            }
        });

        AmountLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        AmountLabel.setText("Сума");

        NoteField.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        NoteField.setName(""); // NOI18N

        NoteLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        NoteLabel.setText("Примітка (необов'язково)");

        AmountField.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        AmountField.setName(""); // NOI18N

        DateChooser.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        DateChooser.setDateFormatString("d MMM y 'р'.");
        DateChooser.setMinSelectableDate(new java.util.Date(946681272000L));

        AccountAmountLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        AccountAmountLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        AccountAmountLabel.setText("Баланс: 0 <UAH/USD>");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(CategoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                .addComponent(AddTransactionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(NoteField, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(TypeLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(AccountLabel)
                                .addGap(18, 18, 18)
                                .addComponent(AccountAmountLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(AddAccountLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(AccountsComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(DateLabel)
                            .addComponent(CategoryLabel)
                            .addComponent(TypeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(AmountLabel)
                            .addComponent(NoteLabel)
                            .addComponent(AmountField)
                            .addComponent(DateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(75, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(AddAccountLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AccountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AccountAmountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AccountsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TypeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CategoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CategoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AmountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AmountField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(NoteLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(NoteField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(AddTransactionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private boolean validateInput(String amountText, int accountId) {
        if (amountText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Будь ласка, введіть суму", "Помилка", JOptionPane.WARNING_MESSAGE);
            return false;
        }

        float floatAmount;
        try {
            floatAmount = Float.parseFloat(amountText);
            if (floatAmount <= 0) {
                JOptionPane.showMessageDialog(this, "Введіть дійсне число", "Помилка", JOptionPane.WARNING_MESSAGE);
                return false;
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Некоректний формат суми.", "Помилка", JOptionPane.WARNING_MESSAGE);
            return false;
        }

        if (DateChooser.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Будь ласка, виберіть дату", "Помилка", JOptionPane.WARNING_MESSAGE);
            return false;
        }

        return true;
    }
    
    private boolean isAmountWithinAccountBalance(float amount, int accountId) {
        try (Connection connection = FinManagerPav.data.getConnection()) {
            String query = "SELECT Amount FROM account WHERE ID = ?";
            try (PreparedStatement statement = connection.prepareStatement(query)) {
                statement.setInt(1, accountId);
                try (ResultSet resultSet = statement.executeQuery()) {
                    if (resultSet.next()) {
                        float currentAmount = resultSet.getFloat("Amount");
                        if (amount > currentAmount) {
                            JOptionPane.showMessageDialog(this, "Сума перевищує наявний баланс рахунку", "Помилка", JOptionPane.WARNING_MESSAGE);
                            return false;
                        }
                    }
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Помилка при отриманні суми рахунку!", "Помилка", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }
    
    String selectedType;
    
    private int getAccountIdFromComboBox(String selectedAccount) {
        int accountId = -1;
        for (Map.Entry<Integer, String> entry : accountIdTitleMap.entrySet()) {
            if (entry.getValue().equals(selectedAccount)) {
                accountId = entry.getKey();
                break;
            }
        }
        return accountId;
    }
    
    private int getCategoryIdFromComboBox(String selectedCategory) {
        int categoryId = -1;
        for (Map.Entry<Integer, String> entry : categoryIdNameMap.entrySet()) {
            if (entry.getValue().equals(selectedCategory)) {
                categoryId = entry.getKey();
                break;
            }
        }
        return categoryId;
    }
    
    private void AddTransactionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddTransactionButtonActionPerformed
        // TODO add your handling code here:
        String selectedAccount = (String) AccountsComboBox.getSelectedItem();
        String selectedCategory = (String) CategoryComboBox.getSelectedItem();
        String amountText = AmountField.getText();
        String note = NoteField.getText();
        
        // Знайти відповідні ID гаманця та категорії за їх назвами
        int accountId = getAccountIdFromComboBox(selectedAccount);
        int categoryId = getCategoryIdFromComboBox(selectedCategory);
        
        if (!validateInput(amountText, accountId)) {
            return;
        }
                
        Date selectedDate = DateChooser.getDate();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd"); 
        String date = sdf.format(selectedDate);
                
        DecimalFormatSymbols decimalFormatSymbols = new DecimalFormatSymbols(Locale.US);
        DecimalFormat df = new DecimalFormat("#.##", decimalFormatSymbols);
        String formattedAmount = df.format(Float.parseFloat(amountText));
        float amount = Float.parseFloat(formattedAmount);
        
        if (selectedType.equals("Витрати")) {
            amount *= -1;
            
            if(!isAmountWithinAccountBalance(amount, accountId)) {
                return;
            }
        }
        
        try (Connection connection = FinManagerPav.data.getConnection()) {
            String query = "INSERT INTO transaction (UserID, AccountID, Date, CategoryID, Amount, Note) VALUES (?, ?, ?, ?, ?, ?)";
            try (PreparedStatement statement = connection.prepareStatement(query)) {
                statement.setInt(1, FinManagerPav.currentUserID);
                statement.setInt(2, accountId);
                statement.setString(3, date);
                statement.setInt(4, categoryId);
                statement.setFloat(5, amount);

                if (note.isEmpty()) {
                    statement.setNull(6, Types.VARCHAR);
                } else {
                    statement.setString(6, note);
                }

                int rowsAffected = statement.executeUpdate();
                if (rowsAffected > 0) {
                    updateAccountAmount(accountId, amount);
                    displayTransactions();
                    JOptionPane.showMessageDialog(this, "Транзакцію успішно додано!", "Успіх", JOptionPane.INFORMATION_MESSAGE);
                    this.dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "Не вдалося додати транзакцію!", "Помилка", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Помилка при додаванні транзакції!", "Помилка", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_AddTransactionButtonActionPerformed

    private void updateAccountAmount(int accountId, float amount) {
        try (Connection connection = FinManagerPav.data.getConnection()) {
            // Отримати поточне значення Amount для обраного рахунку
            String getAmountQuery = "SELECT Amount FROM account WHERE ID = ?";
            try (PreparedStatement getAmountStatement = connection.prepareStatement(getAmountQuery)) {
                getAmountStatement.setInt(1, accountId);
                try (ResultSet resultSet = getAmountStatement.executeQuery()) {
                    if (resultSet.next()) {
                        float currentAmount = resultSet.getFloat("Amount");

                        // Додати до поточного значення Amount суму нової транзакції
                        float updatedAmount = currentAmount + amount;

                        // Оновити значення Amount в базі даних
                        String updateAmountQuery = "UPDATE account SET Amount = ? WHERE ID = ?";
                        try (PreparedStatement updateAmountStatement = connection.prepareStatement(updateAmountQuery)) {
                            updateAmountStatement.setFloat(1, updatedAmount);
                            updateAmountStatement.setInt(2, accountId);
                            updateAmountStatement.executeUpdate();
                        }
                    }
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Помилка при оновленні рахунку!", "Помилка", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private final Map<Integer, String> accountIdTitleMap = new HashMap<>();
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        try (Connection connection = FinManagerPav.data.getConnection()) {
            String query = "SELECT ID, Title, Amount, Currency FROM account WHERE UserID = ?";
            try (PreparedStatement statement = connection.prepareStatement(query)) {
                statement.setInt(1, FinManagerPav.currentUserID);
                try (ResultSet resultSet = statement.executeQuery()) {
                    AccountsComboBox.removeAllItems();
                    accountIdTitleMap.clear(); // Очистити мапу перед додаванням нових даних
                    while (resultSet.next()) {
                        int id = resultSet.getInt("ID");
                        String title = resultSet.getString("Title");
                        float amount = resultSet.getFloat("Amount");
                        String currency = resultSet.getString("Currency");
                        accountIdTitleMap.put(id, title); // Додати ID та назву гаманця до мапи
                        AccountsComboBox.addItem(title); // Додати назву гаманця до комбо боксу
                    }
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Помилка при отриманні списку гаманців!", "Помилка", JOptionPane.ERROR_MESSAGE);
        }
        
        selectedType = (String) TypeComboBox.getSelectedItem();
        updateCategoryComboBox(selectedType);
        
        Calendar calendar = Calendar.getInstance();
        Date today = calendar.getTime();
        DateChooser.setMaxSelectableDate(today);
        DateChooser.setLocale(new Locale("uk", "UA"));
    }//GEN-LAST:event_formWindowOpened

    private void TypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TypeComboBoxActionPerformed
        // TODO add your handling code here:
        selectedType = (String) TypeComboBox.getSelectedItem();
        updateCategoryComboBox(selectedType);
    }//GEN-LAST:event_TypeComboBoxActionPerformed

    private void AccountsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AccountsComboBoxActionPerformed
        // TODO add your handling code here:
        String selectedAccount = (String) AccountsComboBox.getSelectedItem();
        int accountId = getAccountIdFromComboBox(selectedAccount);

        // Отримати кількість і валюту обраного акаунта та відобразити їх на мітці AccountAmountLabel
        try (Connection connection = FinManagerPav.data.getConnection()) {
            String query = "SELECT Amount, Currency FROM account WHERE ID = ?";
            try (PreparedStatement statement = connection.prepareStatement(query)) {
                statement.setInt(1, accountId);
                try (ResultSet resultSet = statement.executeQuery()) {
                    if (resultSet.next()) {
                        float amount = resultSet.getFloat("Amount");
                        String currency = resultSet.getString("Currency");
                        AccountAmountLabel.setText("Баланс: " + amount + " " + currency);
                    }
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Помилка при отриманні даних гаманця!", "Помилка", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_AccountsComboBoxActionPerformed

    private final Map<Integer, String> categoryIdNameMap = new HashMap<>();
    
    private void updateCategoryComboBox(String selectedType) {
        CategoryComboBox.removeAllItems();
        categoryIdNameMap.clear(); // Очистити мапу перед заповненням

        try (Connection connection = FinManagerPav.data.getConnection()) {
            String query = "SELECT ID, Name FROM category WHERE Type = ? AND (UserID = ? OR UserID IS NULL)";
            try (PreparedStatement statement = connection.prepareStatement(query)) {
                statement.setString(1, selectedType);
                statement.setInt(2, FinManagerPav.currentUserID);

                try (ResultSet resultSet = statement.executeQuery()) {
                    while (resultSet.next()) {
                        int categoryId = resultSet.getInt("ID");
                        String categoryName = resultSet.getString("Name");
                        categoryIdNameMap.put(categoryId, categoryName); // Додати пару ID-назва в мапу
                        CategoryComboBox.addItem(categoryName);
                    }
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Помилка при отриманні списку категорій!", "Помилка", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddTransactionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddTransactionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddTransactionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddTransactionDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AddTransactionDialog dialog = new AddTransactionDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AccountAmountLabel;
    private javax.swing.JLabel AccountLabel;
    private javax.swing.JComboBox<String> AccountsComboBox;
    private javax.swing.JLabel AddAccountLabel;
    private javax.swing.JButton AddTransactionButton;
    private javax.swing.JTextField AmountField;
    private javax.swing.JLabel AmountLabel;
    private javax.swing.JComboBox<String> CategoryComboBox;
    private javax.swing.JLabel CategoryLabel;
    public static com.toedter.calendar.JDateChooser DateChooser;
    private javax.swing.JLabel DateLabel;
    private javax.swing.JTextField NoteField;
    private javax.swing.JLabel NoteLabel;
    private javax.swing.JComboBox<String> TypeComboBox;
    private javax.swing.JLabel TypeLabel;
    // End of variables declaration//GEN-END:variables
}
